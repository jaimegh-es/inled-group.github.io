---
const base = import.meta.env.BASE_URL;
const slides = [
  {
    title: 'Swiftinstall ahora es tu asistente de apps en Linux',
    description: 'Desde instalar y desinstalar hasta corregir errores de instalación, limpiar archivos basura del sistema y analizar en busca de virus con el mejor antivirus para Linux.',
    href: '/swiftinstall',
    cta: 'Descubre la maravilla',
    image: base + '/upload/swiftinstallbannercolor.png',
    alt: 'logo swiftinstall'
  },
  {
    title: 'Desarrollamos con IA de forma responsable',
    description: 'Inled es marca pionera en desarrollo con Inteligencia Artificial con un sistema de revisión y pruebas que confiere una alta fiabilidad.',
    href: '/blog/desarrollo-con-ia-responsable-herramientas',
    cta: 'Lee el artículo',
    image: base + '/upload/nokiamanosrobot.png',
    alt: 'robots como si fuera de nokia'
  },
  {
    title: 'Inled AI',
    description: 'Marcando el futuro de la IA para la web.',
    href: 'https://ai.inled.es',
    cta: 'Un paso hacia el futuro',
    image: base + '/upload/ainclouddeco.png',
    alt: 'Logotipo de Inled AI'
  }
];
---

<section class="hero-carousel" aria-label="Proyectos destacados" id="hero-carousel">
  <div class="carousel-background" id="carousel-bg"></div>
  <div class="carousel-track">
    {slides.map((slide, index) => (
      <article
        class={`carousel-slide${index === 0 ? ' is-active' : ''}`}
        data-role="slide"
        data-index={index}
        id={`hero-slide-${index}`}
        aria-hidden={index === 0 ? 'false' : 'true'}
        style={`--slide-image: url('${slide.image}')`}
      >
        <span class="visually-hidden">{slide.alt}</span>
        <div class="carousel-copy" data-aos="fade-up">
          <h1 class="hero-title">{slide.title}</h1>
          <p class="hero-description">{slide.description}</p>
          <a href={slide.href} class="hero-cta" data-hover="expand">{slide.cta}</a>
        </div>
      </article>
    ))}
  </div>
  <div class="carousel-overlay" aria-hidden="true"></div>
  <div class="carousel-indicators" role="tablist">
    {slides.map((_, index) => (
      <button
        type="button"
        class={`carousel-indicator${index === 0 ? ' is-active' : ''}`}
        aria-label={`Ver diapositiva ${index + 1}`}
        aria-controls={`hero-slide-${index}`}
        data-role="indicator"
        data-index={index}
      ></button>
    ))}
  </div>
  <div class="scroll-indicator" data-scroll-hint>
    <div class="scroll-arrow"></div>
  </div>
</section>

<style>
  .hero-carousel {
    position: relative;
    width: 100vw;
    min-height: 100vh;
    margin: 0;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
    padding: 0;
    border-radius: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #000000;
    box-sizing: border-box;
    z-index: 0;
  }

  .carousel-background {
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, #000000 0%, #111111 50%, #000000 100%);
    z-index: 1;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .carousel-track {
    position: relative;
    width: 100%;
    height: 100vh;
    z-index: 2;
  }

  .carousel-overlay {
    position: absolute;
    inset: 0;
    background: #000000;
    transform-origin: left;
    transform: scaleX(0);
    pointer-events: none;
    z-index: 4;
  }

  .hero-carousel.is-animating .carousel-overlay {
    animation: wipe-cycle 0.9s ease forwards;
  }

  .carousel-slide {
    position: absolute;
    inset: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: clamp(2rem, 5vw, 4rem);
    color: #ffffff;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 1s ease, transform 1s ease;
    transform: scale(1.05) translateY(20px);
    z-index: 2;
  }

  .carousel-slide::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: var(--slide-image);
    background-size: cover;
    background-position: center;
    opacity: 0.3;
    filter: blur(2px);
    z-index: -2;
  }

  .carousel-slide::after {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at center, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.8) 70%);
    z-index: -1;
  }

  .carousel-slide.is-active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
    transform: scale(1) translateY(0);
  }

  .carousel-copy {
    position: relative;
    max-width: 800px;
    text-align: center;
    background: rgba(0, 0, 0, 0.7);
    padding: clamp(2rem, 5vw, 4rem);
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
  }

  .hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    margin-bottom: 1.5rem;
    color: #ffffff;
    font-weight: 700;
    line-height: 1.2;
    text-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  }

  .hero-description {
    margin: 0 0 2rem;
    font-size: clamp(1.1rem, 2.5vw, 1.4rem);
    line-height: 1.6;
    color: rgba(255, 255, 255, 0.9);
    text-align: center;
  }

  .hero-cta {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.8rem;
    border-radius: 30px;
    background: linear-gradient(135deg, #3bb4fc, #2a9de8);
    color: #ffffff;
    font-weight: 600;
    font-size: 1rem;
    text-decoration: none;
    transition: all 0.3s ease;
    box-shadow: 0 8px 20px rgba(59, 180, 252, 0.3);
    overflow: hidden;
    z-index: 0;
  }

  .hero-cta::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, #2a9de8, #3bb4fc);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .hero-cta:hover::before {
    opacity: 1;
  }

  .hero-cta:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 12px 25px rgba(59, 180, 252, 0.4);
  }

  @keyframes wipe-cycle {
    0% {
      transform: scaleX(0);
      transform-origin: left;
    }
    49% {
      transform: scaleX(1);
      transform-origin: left;
    }
    50% {
      transform: scaleX(1);
      transform-origin: right;
    }
    100% {
      transform: scaleX(0);
      transform-origin: right;
    }
  }

  .carousel-indicators {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    z-index: 3;
  }

  .carousel-indicator {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.5);
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .carousel-indicator.is-active {
    background: #3bb4fc;
    border-color: #3bb4fc;
    transform: scale(1.2);
  }

  .carousel-indicator:hover {
    border-color: rgba(255, 255, 255, 0.8);
    transform: scale(1.1);
  }

  .scroll-indicator {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    z-index: 3;
    animation: bounce 2s infinite;
  }

  .scroll-arrow {
    width: 2px;
    height: 30px;
    background: linear-gradient(to bottom, transparent, #3bb4fc);
    position: relative;
  }

  .scroll-arrow::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 8px solid #3bb4fc;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateX(-50%) translateY(0);
    }
    40% {
      transform: translateX(-50%) translateY(-10px);
    }
    60% {
      transform: translateX(-50%) translateY(-5px);
    }
  }

  @media (max-width: 768px) {
    .hero-carousel {
      min-height: 100vh;
    }

    .carousel-copy {
      padding: clamp(1.5rem, 5vw, 2rem);
    }

    .carousel-indicators {
      bottom: 2rem;
    }

    .scroll-indicator {
      bottom: 0.5rem;
    }
  }
</style>

<script is:inline>
  (() => {
    const initHeroCarousel = (root) => {
      const slides = Array.from(root.querySelectorAll('[data-role="slide"]'));
      const indicators = Array.from(root.querySelectorAll('[data-role="indicator"]'));
      const overlay = root.querySelector('.carousel-overlay');

      if (slides.length === 0) return;

      let activeIndex = slides.findIndex((slide) => slide.classList.contains('is-active'));
      if (activeIndex < 0) activeIndex = 0;

      const intervalMs = 8000;
      let timer = null;
      let transitionTimeout = null;

      if (overlay) {
        overlay.addEventListener('animationend', () => {
          root.classList.remove('is-animating');
        });
      }

      const triggerOverlay = () => {
        if (!overlay) return;
        root.classList.remove('is-animating');
        void overlay.offsetWidth;
        root.classList.add('is-animating');
      };

      const updateIndicators = (index) => {
        indicators.forEach((dot, idx) => {
          dot.classList.toggle('is-active', idx === index);
        });
      };

      const swapSlides = (nextIndex) => {
        const previousSlide = slides[activeIndex];
        const nextSlide = slides[nextIndex];

        if (previousSlide) {
          previousSlide.classList.remove('is-active');
          previousSlide.setAttribute('aria-hidden', 'true');
        }

        if (nextSlide) {
          nextSlide.classList.add('is-active');
          nextSlide.setAttribute('aria-hidden', 'false');
        }

        activeIndex = nextIndex;
        updateIndicators(nextIndex);
      };

      const scheduleSwap = (nextIndex) => {
        const runSwap = () => {
          swapSlides(nextIndex);
          transitionTimeout = null;
        };

        if (overlay) {
          triggerOverlay();
          transitionTimeout = window.setTimeout(runSwap, 450);
        } else {
          runSwap();
        }
      };

      const setActive = (index) => {
        const boundedIndex = (index + slides.length) % slides.length;
        if (boundedIndex === activeIndex || transitionTimeout) return;
        scheduleSwap(boundedIndex);
      };

      const next = () => setActive(activeIndex + 1);

      const startTimer = () => {
        stopTimer();
        timer = window.setInterval(next, intervalMs);
      };

      const stopTimer = () => {
        if (timer) {
          window.clearInterval(timer);
          timer = null;
        }
      };

      indicators.forEach((dot) => {
        dot.addEventListener('click', () => {
          setActive(Number(dot.dataset.index));
          startTimer();
        });
      });

      root.addEventListener('mouseenter', stopTimer);
      root.addEventListener('mouseleave', startTimer);

      startTimer();
    };

    const ready = () => {
      document.querySelectorAll('.hero-carousel').forEach(initHeroCarousel);
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', ready, { once: true });
    } else {
      ready();
    }
  })();
</script>