---
const base = import.meta.env.BASE_URL;
---

<section class="hero-cta" id="hero-cta">
  <div class="cta-background">
    <canvas id="three-canvas"></canvas>
    <div class="gradient-overlay"></div>
  </div>

  <div class="cta-container">
    <div class="cta-content" data-gsap="fadeInUp">
      <h2 class="cta-title">Â¿Te ha gustado?</h2>
      <p class="cta-description">
        Descubre toda la innovaciÃ³n de Inled y como hacemos un mundo mejor.
      </p>


      <div class="social-proof">
        <div class="proof-item" data-gsap="countUp" data-count="27">
          <span class="proof-number">0</span>
          <span class="proof-label">Proyectos completados</span>
        </div>
        <div class="proof-item" data-gsap="countUp" data-count="100">
          <span class="proof-number">0</span>
          <span class="proof-label">% SatisfacciÃ³n</span>
        </div>
        <div class="proof-item" data-gsap="countUp" data-count="2">
          <span class="proof-number">0</span>
          <span class="proof-label">AÃ±os innovando</span>
        </div>
      </div>

    <!--   <div class="contact-info">
        <p class="contact-text">Â¿Tienes una idea? Hablemos</p>
        <div class="contact-links">
          <a href="mailto:contacto@inled.es" class="contact-link" data-hover="bounce">
            <span class="contact-icon">ðŸ“§</span>
            <span>contacto@inled.es</span>
          </a>
          <a href="https://github.com/InledGroup" class="contact-link" data-hover="bounce">
            <span class="contact-icon">ðŸ’»</span>
            <span>GitHub</span>
          </a>
        </div>
      </div>-->
    </div>
  </div>

  <div class="floating-particles">
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
  </div>
</section>

<style>
  .hero-cta {
    position: relative;
    min-height: 100vh;
    background: #000000;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    padding: clamp(3rem, 8vw, 5rem) 0;
  }

  .cta-background {
    position: absolute;
    inset: 0;
    z-index: 1;
  }

  #three-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.4;
  }

  .gradient-overlay {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at center,
      rgba(0, 0, 0, 0.3) 0%,
      rgba(0, 0, 0, 0.7) 70%,
      rgba(0, 0, 0, 0.9) 100%
    );
  }

  .cta-container {
    position: relative;
    z-index: 2;
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 clamp(1rem, 5vw, 2rem);
    text-align: center;
  }

  .cta-content {
    opacity: 0;
    transform: translateY(30px);
  }

  .cta-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 1.5rem;
    line-height: 1.2;
    background: linear-gradient(135deg, #ffffff, #3bb4fc);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .cta-description {
    font-size: clamp(1.1rem, 2.5vw, 1.4rem);
    line-height: 1.6;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 3rem;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  .cta-actions {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    margin-bottom: 4rem;
    flex-wrap: wrap;
  }

  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.6rem;
    border-radius: 30px;
    font-weight: 600;
    font-size: 1rem;
    text-decoration: none;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    border: 2px solid transparent;
  }

  .cta-button.primary {
    background: linear-gradient(135deg, #3bb4fc, #2a9de8);
    color: #ffffff;
    box-shadow: 0 8px 20px rgba(59, 180, 252, 0.3);
  }

  .cta-button.primary:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 12px 25px rgba(59, 180, 252, 0.4);
    color: #ffffff;
    text-decoration: none;
  }

  .cta-button.secondary {
    background: transparent;
    color: #ffffff;
    border-color: rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
  }

  .cta-button.secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-2px);
    color: #ffffff;
    text-decoration: none;
  }

  .button-icon {
    transition: transform 0.3s ease;
  }

  .cta-button:hover .button-icon {
    transform: scale(1.2) rotate(10deg);
  }

  .social-proof {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-bottom: 3rem;
    flex-wrap: wrap;
  }

  .proof-item {
    text-align: center;
  }

  .proof-number {
    display: block;
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: #3bb4fc;
    line-height: 1;
  }

  .proof-label {
    display: block;
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.7);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 0.5rem;
  }

  .contact-info {
    margin-top: 3rem;
  }

  .contact-text {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 1.5rem;
  }

  .contact-links {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .contact-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .contact-link:hover {
    color: #3bb4fc;
    border-color: #3bb4fc;
    transform: translateY(-2px);
    text-decoration: none;
  }

  .contact-icon {
    font-size: 1.2rem;
  }

  .floating-particles {
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: 1;
  }

  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: #3bb4fc;
    border-radius: 50%;
    opacity: 0.6;
    animation: float-particle 8s infinite linear;
  }

  .particle:nth-child(1) {
    left: 10%;
    animation-delay: 0s;
    animation-duration: 8s;
  }

  .particle:nth-child(2) {
    left: 25%;
    animation-delay: 2s;
    animation-duration: 12s;
  }

  .particle:nth-child(3) {
    left: 50%;
    animation-delay: 4s;
    animation-duration: 10s;
  }

  .particle:nth-child(4) {
    left: 75%;
    animation-delay: 6s;
    animation-duration: 14s;
  }

  .particle:nth-child(5) {
    left: 90%;
    animation-delay: 8s;
    animation-duration: 16s;
  }

  @keyframes float-particle {
    0% {
      transform: translateY(100vh) scale(0);
      opacity: 0;
    }
    10% {
      opacity: 0.6;
      transform: scale(1);
    }
    90% {
      opacity: 0.6;
      transform: scale(1);
    }
    100% {
      transform: translateY(-100vh) scale(0);
      opacity: 0;
    }
  }

  @media (max-width: 768px) {
    .cta-actions {
      flex-direction: column;
      align-items: center;
    }

    .cta-button {
      width: 100%;
      max-width: 280px;
      justify-content: center;
    }

    .social-proof {
      gap: 2rem;
    }

    .contact-links {
      flex-direction: column;
      align-items: center;
    }
  }

  @media (max-width: 480px) {
    .social-proof {
      flex-direction: column;
      gap: 1.5rem;
    }
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  import * as THREE from 'three';

  if (typeof window !== 'undefined') {
    gsap.registerPlugin(ScrollTrigger);

    let scene, camera, renderer, particles;

    const initThreeJS = () => {
      const canvas = document.getElementById('three-canvas');
      if (!canvas) return;

      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ canvas, alpha: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(window.devicePixelRatio);

      // Create particle system
      const particleCount = 100;
      const positions = new Float32Array(particleCount * 3);
      const velocities = new Float32Array(particleCount * 3);

      for (let i = 0; i < particleCount; i++) {
        positions[i * 3] = (Math.random() - 0.5) * 20;
        positions[i * 3 + 1] = (Math.random() - 0.5) * 20;
        positions[i * 3 + 2] = (Math.random() - 0.5) * 20;

        velocities[i * 3] = (Math.random() - 0.5) * 0.02;
        velocities[i * 3 + 1] = (Math.random() - 0.5) * 0.02;
        velocities[i * 3 + 2] = (Math.random() - 0.5) * 0.02;
      }

      const geometry = new THREE.BufferGeometry();
      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

      const material = new THREE.PointsMaterial({
        color: 0x3bb4fc,
        size: 0.05,
        blending: THREE.AdditiveBlending,
        transparent: true,
        opacity: 0.8
      });

      particles = new THREE.Points(geometry, material);
      scene.add(particles);

      camera.position.z = 5;

      // Animation loop
      const animate = () => {
        requestAnimationFrame(animate);

        // Rotate particles
        particles.rotation.x += 0.001;
        particles.rotation.y += 0.002;

        // Update particle positions
        const positions = particles.geometry.attributes.position.array;
        for (let i = 0; i < positions.length; i += 3) {
          positions[i] += velocities[i];
          positions[i + 1] += velocities[i + 1];
          positions[i + 2] += velocities[i + 2];

          // Wrap around
          if (Math.abs(positions[i]) > 10) velocities[i] *= -1;
          if (Math.abs(positions[i + 1]) > 10) velocities[i + 1] *= -1;
          if (Math.abs(positions[i + 2]) > 10) velocities[i + 2] *= -1;
        }
        particles.geometry.attributes.position.needsUpdate = true;

        renderer.render(scene, camera);
      };

      animate();

      // Handle resize
      const handleResize = () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      };

      window.addEventListener('resize', handleResize);
    };

    const initCTAAnimations = () => {
      // Main content animation
      gsap.fromTo('[data-gsap="fadeInUp"]', {
        opacity: 0,
        y: 30
      }, {
        opacity: 1,
        y: 0,
        duration: 1.2,
        ease: "power2.out",
        scrollTrigger: {
          trigger: '[data-gsap="fadeInUp"]',
          start: "top 80%",
          toggleActions: "play none none reverse"
        }
      });

      // Count up animations
      document.querySelectorAll('[data-gsap="countUp"]').forEach(element => {
        const countElement = element.querySelector('.proof-number');
        const targetCount = parseInt(element.dataset.count);

        gsap.fromTo(countElement, {
          innerHTML: 0
        }, {
          innerHTML: targetCount,
          duration: 2,
          ease: "power2.out",
          snap: { innerHTML: 1 },
          scrollTrigger: {
            trigger: element,
            start: "top 80%",
            toggleActions: "play none none reverse"
          }
        });
      });

      // Button hover effects
      document.querySelectorAll('[data-hover="glow"]').forEach(button => {
        button.addEventListener('mouseenter', () => {
          gsap.to(button, {
            boxShadow: "0 0 30px rgba(59, 180, 252, 0.6)",
            duration: 0.3
          });
        });

        button.addEventListener('mouseleave', () => {
          gsap.to(button, {
            boxShadow: "0 8px 20px rgba(59, 180, 252, 0.3)",
            duration: 0.3
          });
        });
      });

      // Contact link bounce effect
      document.querySelectorAll('[data-hover="bounce"]').forEach(link => {
        link.addEventListener('mouseenter', () => {
          gsap.to(link.querySelector('.contact-icon'), {
            y: -3,
            duration: 0.2,
            ease: "power2.out"
          });
        });

        link.addEventListener('mouseleave', () => {
          gsap.to(link.querySelector('.contact-icon'), {
            y: 0,
            duration: 0.2,
            ease: "power2.out"
          });
        });
      });
    };

    // Initialize everything
    const init = () => {
      initThreeJS();
      initCTAAnimations();
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  }
</script>